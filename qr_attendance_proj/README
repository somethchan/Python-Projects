How the script works:

Prerequisites
Client must upload a roster file RENAMED to `Roster.csv` to the NFS mount
i.e /NFS-share/<CNIT###>/Roster.csv

1. Client-side initiation

The client executes a script `attnednace.py` that prompts them for relevant variables i.e <email-body> <date> <course-name>. Each variable is stored to be passed to the attendance server through an HTTP-POST request. Saftey checks are performed throughout `attendance.py` to confirm the accuracy of user inputs. once the client is satisfied, the script will then send a HTTP-POST request to the production mail-server.

2. Using uvicorn to listen for incoming HTTP requests
The middleware code intercepts the http process and checks if the requestor IP is part of a permitted IP list in `http_listener.py`.
If the IP is among the list of permitted IPs, the middleware triggers sequentially executed code or blocking code. 

If the uvicorn service is not running on the mail server, ensure that it is available and listening with:
uvicorn app:app --host <mail_server_ip> --port <listen_port> --workers <num_connections>

The number of workers defined for `--workers` correlates to the number of concurrent sessions are available. 

3. Server processes the request

Once the user passes the initial IP check, the server uses the variables passed in the HTTP POST request to generate QR codes which are stored in a folder with sessions specifics on the shared NFS directory. 

sample file path: /NFS-share/<CNIT###>/<DATE>/QR-Codes

With the QR-code and the roster file, the server mass-mail the attendance QR code to each student in the roster file.







Necessary Dependencies
pip3 install qrcode pandas pillow rsa msal requests
pip install fastapi uvicorn[standard] pydantic ipaddress
